{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select-12",
  "type": "registry:component",
  "title": "Select with Auto-Complete",
  "description": "A select component with auto-complete functionality",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "select",
    "command",
    "badge"
  ],
  "files": [
    {
      "path": "src/components/customized/select/select-12.tsx",
      "content": "\"use client\";\n\nimport { X } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { useCallback, useMemo } from \"react\";\n\ntype Country = Record<\"value\" | \"label\", string>;\n\nconst COUNTRIES = [\n  {\n    value: \"us\",\n    label: \"United States\",\n  },\n  {\n    value: \"uk\",\n    label: \"United Kingdom\",\n  },\n  {\n    value: \"ca\",\n    label: \"Canada\",\n  },\n  {\n    value: \"au\",\n    label: \"Australia\",\n  },\n  {\n    value: \"fr\",\n    label: \"France\",\n  },\n  {\n    value: \"de\",\n    label: \"Germany\",\n  },\n  {\n    value: \"jp\",\n    label: \"Japan\",\n  },\n  {\n    value: \"br\",\n    label: \"Brazil\",\n  },\n] satisfies Country[];\n\nexport default function FancyMultiSelect() {\n  const [open, setOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState<Country[]>([COUNTRIES[1]]);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const handleUnselect = useCallback((country: Country) => {\n    setSelected((prev) => prev.filter((s) => s.value !== country.value));\n  }, []);\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Backspace\" && selected.length > 0) {\n        setSelected((prev) => prev.slice(0, -1));\n      }\n    },\n    [selected]\n  );\n\n  const filteredCountries = useMemo(\n    () => COUNTRIES.filter((country) => !selected.includes(country)),\n    [selected]\n  );\n\n  return (\n    <div className=\"w-full\">\n      <Command className=\"overflow-visible\">\n        <div className=\"rounded-md border border-input px-3 py-2 text-sm ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\">\n          <div className=\"flex flex-wrap gap-1\">\n            {selected.map((country) => {\n              return (\n                <Badge\n                  key={country.value}\n                  variant=\"secondary\"\n                  className=\"select-none\"\n                >\n                  {country.label}\n                  <X\n                    className=\"size-3 text-muted-foreground hover:text-foreground ml-2 cursor-pointer\"\n                    onMouseDown={(e) => {\n                      e.preventDefault();\n                    }}\n                    onClick={() => {\n                      handleUnselect(country);\n                    }}\n                  />\n                </Badge>\n              );\n            })}\n            <CommandPrimitive.Input\n              onKeyDown={handleKeyDown}\n              onValueChange={setInputValue}\n              value={inputValue}\n              onBlur={() => setOpen(false)}\n              onFocus={() => setOpen(true)}\n              placeholder=\"Select countries...\"\n              className=\"ml-2 flex-1 bg-transparent outline-none placeholder:text-muted-foreground\"\n            />\n          </div>\n        </div>\n        <div className=\"relative mt-2\">\n          <CommandList>\n            {open && !!filteredCountries.length && (\n              <div className=\"absolute top-0 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none\">\n                <CommandGroup className=\"h-full overflow-auto\">\n                  {filteredCountries.map((country) => {\n                    return (\n                      <CommandItem\n                        key={country.value}\n                        onMouseDown={(e) => {\n                          e.preventDefault();\n                        }}\n                        onSelect={() => {\n                          setInputValue(\"\");\n                          setSelected((prev) => [...prev, country]);\n                        }}\n                        className={\"cursor-pointer\"}\n                      >\n                        {country.label}\n                      </CommandItem>\n                    );\n                  })}\n                </CommandGroup>\n              </div>\n            )}\n          </CommandList>\n        </div>\n      </Command>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}