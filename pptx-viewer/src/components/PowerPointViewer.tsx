"use client";

import { useState } from "react";
import { PowerPointData } from "@/types/pptx";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import JSONUploader from "./JSONUploader";
import DemoLoader from "./DemoLoader";
import SlideRenderer from "./SlideRenderer";

export default function PowerPointViewer() {
  const [data, setData] = useState<PowerPointData | null>(null);

  const handleDataLoad = (loadedData: PowerPointData) => {
    setData(loadedData);
  };

  if (!data) {
    return (
      <div className="container mx-auto py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-2">PowerPoint JSON Viewer</h1>
          <p className="text-muted-foreground">
            Upload JSON files generated by the PowerPoint extractor to view your presentation data
          </p>
        </div>
        <div className="space-y-6">
          <DemoLoader onDataLoad={handleDataLoad} />
          <div className="text-center text-muted-foreground">
            <p>- or -</p>
          </div>
          <JSONUploader onDataLoad={handleDataLoad} />
        </div>
      </div>
    );
  }

  const slideWidth = data.properties.slide_size?.width || 9144000;
  const slideHeight = data.properties.slide_size?.height || 6858000;

  return (
    <div className="container mx-auto py-8">
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold mb-2">PowerPoint JSON Viewer</h1>
        <div className="flex justify-center gap-2 mb-4">
          <Badge variant="outline">{data.shapes.length} slides</Badge>
          <Badge variant="outline">{data.layouts.length} layouts</Badge>
          <Badge variant="outline">{Object.keys(data.media.images).length} images</Badge>
        </div>
        <button
          onClick={() => setData(null)}
          className="text-sm text-muted-foreground hover:text-foreground"
        >
          Upload different files
        </button>
      </div>

      <Tabs defaultValue="slides" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="slides">Slides</TabsTrigger>
          <TabsTrigger value="layouts">Layouts</TabsTrigger>
          <TabsTrigger value="theme">Theme</TabsTrigger>
          <TabsTrigger value="media">Media</TabsTrigger>
          <TabsTrigger value="properties">Properties</TabsTrigger>
        </TabsList>

        <TabsContent value="slides" className="space-y-6">
          <div className="grid gap-6">
            {data.shapes.map((slide) => (
              <SlideRenderer
                key={slide.slide_index}
                slide={slide}
                theme={data.theme}
                slideWidth={slideWidth / 9525}
                slideHeight={slideHeight / 9525}
              />
            ))}
          </div>
        </TabsContent>

        <TabsContent value="layouts" className="space-y-6">
          <div className="grid gap-4">
            {data.layouts.map((layout) => (
              <Card key={layout.layout_index}>
                <CardHeader>
                  <CardTitle>{layout.name}</CardTitle>
                  <CardDescription>
                    Layout {layout.layout_index + 1} • {layout.placeholders.length} placeholders
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {layout.placeholders.map((placeholder, index) => (
                      <div key={index} className="p-3 border rounded-lg">
                        <div className="font-medium">{placeholder.name}</div>
                        <div className="text-sm text-muted-foreground">
                          {placeholder.placeholder_format}
                        </div>
                        <div className="text-xs text-muted-foreground mt-1">
                          {Math.round(placeholder.width / 9525)}×{Math.round(placeholder.height / 9525)} px
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="theme" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>{data.theme.theme_name}</CardTitle>
              <CardDescription>Theme colors and fonts</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <h3 className="font-semibold mb-3">Color Scheme</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {Object.entries(data.theme.color_scheme).map(([name, color]) => (
                    <div key={name} className="flex items-center gap-2">
                      <div
                        className="w-6 h-6 rounded border"
                        style={{ backgroundColor: `#${color.rgb}` }}
                      />
                      <div>
                        <div className="font-medium text-sm">{name}</div>
                        <div className="text-xs text-muted-foreground">#{color.rgb}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="font-semibold mb-3">Font Scheme</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="p-3 border rounded-lg">
                    <div className="font-medium mb-1">Major Font (Headings)</div>
                    <div className="text-sm text-muted-foreground">
                      {data.theme.font_scheme.major_font?.latin || "Default"}
                    </div>
                  </div>
                  <div className="p-3 border rounded-lg">
                    <div className="font-medium mb-1">Minor Font (Body)</div>
                    <div className="text-sm text-muted-foreground">
                      {data.theme.font_scheme.minor_font?.latin || "Default"}
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="media" className="space-y-6">
          <div className="grid gap-4">
            {Object.entries(data.media.images).map(([filename, media]) => (
              <Card key={filename}>
                <CardHeader>
                  <CardTitle className="text-lg">{filename}</CardTitle>
                  <CardDescription>
                    Size: {Math.round(media.size / 1024)} KB
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <img
                    src={`data:image/jpeg;base64,${media.data}`}
                    alt={filename}
                    className="max-w-full max-h-64 object-contain border rounded"
                  />
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="properties" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Document Properties</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {data.properties.core_properties && Object.entries(data.properties.core_properties).map(([key, value]) => (
                  value && (
                    <div key={key} className="p-3 border rounded-lg">
                      <div className="font-medium capitalize">{key.replace(/_/g, ' ')}</div>
                      <div className="text-sm text-muted-foreground">{value}</div>
                    </div>
                  )
                ))}
              </div>
              
              {data.properties.slide_size && (
                <div className="mt-6 p-3 border rounded-lg">
                  <div className="font-medium">Slide Size</div>
                  <div className="text-sm text-muted-foreground">
                    {Math.round(data.properties.slide_size.width / 9525)}×{Math.round(data.properties.slide_size.height / 9525)} pixels
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}